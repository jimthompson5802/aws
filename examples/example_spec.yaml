# Example YAML specification for AWS Compute and Storage Automation
# This file demonstrates how to define EC2 instances and their associated storage

instances:
  - name: "web-server-1"
    instance_type: "t3.micro"
    ami_id: "ami-0c02fb55956c7d316"  # Amazon Linux 2 AMI (update for your region)
    market_type: "on-demand"  # or "spot"
    key_name: "my-key-pair"  # Optional: EC2 Key Pair name
    security_groups:  # Optional: Security Group IDs
      - "sg-12345678"
    subnet_id: "subnet-12345678"  # Optional: Subnet ID
    iam_role: "my-instance-role"  # Optional: IAM instance profile name
    tags:  # Optional: Custom tags
      - Key: "Environment"
        Value: "production"
      - Key: "Project"
        Value: "web-app"
    user_data:  # Optional: User data script for instance customization
      script_path: "examples/python_web_server.sh"  # Path to script file
    # Optional: CloudWatch idle shutdown configuration
    idle_shutdown:
      cpu_threshold: 10.0          # Stop when CPU < 10% for specified time
      evaluation_minutes: 20       # Evaluate for 20 minutes
      action: "stop"               # "stop" or "terminate"
    volumes:  # Optional: Additional EBS volumes
      - size: 20
        type: "gp3"
        device: "/dev/sdf"
        iops: 3000  # Optional: for gp3, io1, io2
        encrypted: true
      - size: 50
        type: "gp3"
        device: "/dev/sdg"
        encrypted: false

  - name: "app-server-1"
    instance_type: "t3.small"
    ami_id: "ami-0c02fb55956c7d316"
    market_type: "spot"  # Spot instance
    spot_price: "0.02"  # Optional: maximum spot price
    key_name: "my-key-pair"
    security_groups:
      - "sg-87654321"
    tags:
      - Key: "Environment"
        Value: "production"
      - Key: "Role"
        Value: "application"
    user_data:  # Example of inline script
      inline_script: |
        #!/bin/bash
        yum update -y
        yum install -y docker
        systemctl start docker
        systemctl enable docker
        usermod -a -G docker ec2-user
        
        # Install application
        mkdir -p /opt/app
        cd /opt/app
        git clone https://github.com/example/my-app.git .
        docker build -t my-app .
        docker run -d -p 80:8080 --name my-app-container my-app
        
        echo "Application setup completed!"
    volumes:
      - size: 30
        type: "gp3"
        device: "/dev/sdf"
        encrypted: true

  - name: "database-server-1"
    instance_type: "t3.medium"
    ami_id: "ami-0c02fb55956c7d316"
    market_type: "on-demand"
    key_name: "my-key-pair"
    security_groups:
      - "sg-11223344"
    tags:
      - Key: "Environment"
        Value: "production"
      - Key: "Role"
        Value: "database"
    user_data:  # Database setup script
      script_path: "examples/database_setup.sh"
    volumes:
      - size: 100
        type: "io2"
        device: "/dev/sdf"
        iops: 1000
        encrypted: true
      - size: 200
        type: "gp3"
        device: "/dev/sdg"
        encrypted: true

  - name: "data-science-server"
    instance_type: "m5.large"
    ami_id: "ami-0c02fb55956c7d316"
    market_type: "spot"
    spot_price: "0.08"
    key_name: "my-key-pair"
    security_groups:
      - "sg-datascience"
    tags:
      - Key: "Environment"
        Value: "development"
      - Key: "Role"
        Value: "data-science"
    user_data:  # Data science environment setup
      script_path: "examples/data_science_setup.sh"
    # Idle shutdown for development data science instance
    idle_shutdown:
      cpu_threshold: 5.0           # Stop when CPU < 5%
      evaluation_minutes: 15       # For 15 minutes
      action: "stop"               # Stop to preserve environment
    volumes:
      - size: 500
        type: "gp3"
        device: "/dev/sdf"
        encrypted: true
